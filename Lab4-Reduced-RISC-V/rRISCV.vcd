$version Generated by VerilatedVcd $end
$date Thu Nov 24 16:15:22 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 < a0 [31:0] $end
  $var wire  1 : clk $end
  $var wire  1 ; rst $end
  $scope module rRISCV $end
   $var wire  1 2 ALUctrl $end
   $var wire  1 3 ALUsrc $end
   $var wire 32 > D_WIDTH [31:0] $end
   $var wire  1 6 EQ $end
   $var wire 32 4 ImmOp [31:0] $end
   $var wire  1 7 ImmSrc $end
   $var wire 32 ' PC [31:0] $end
   $var wire  1 1 PCsrc $end
   $var wire  1 5 RegWrite $end
   $var wire 32 < a0 [31:0] $end
   $var wire  1 : clk $end
   $var wire 32 ( instr [31:0] $end
   $var wire  1 ; rst $end
   $scope module Control $end
    $var wire  1 2 ALUctrl $end
    $var wire  1 3 ALUsrc $end
    $var wire  1 6 EQ $end
    $var wire  1 7 ImmSrc $end
    $var wire  1 1 PCsrc $end
    $var wire  1 5 RegWrite $end
    $var wire  1 * addi $end
    $var wire  1 + bne $end
    $var wire  7 ) instr [6:0] $end
   $upscope $end
   $scope module InstrMem $end
    $var wire 32 ' A [31:0] $end
    $var wire 32 > ADDRESS_WIDTH [31:0] $end
    $var wire 32 > DATA_WIDTH [31:0] $end
    $var wire 32 ( RD [31:0] $end
   $upscope $end
   $scope module PCregister $end
    $var wire 32 > WIDTH [31:0] $end
    $var wire  1 : clk $end
    $var wire 32 4 immop [31:0] $end
    $var wire 32 ' pc [31:0] $end
    $var wire  1 1 pcsrc $end
    $var wire  1 ; rst $end
   $upscope $end
   $scope module RedBlock $end
    $var wire  1 2 ALUctrl $end
    $var wire 32 # ALUop1 [31:0] $end
    $var wire 32 8 ALUop2 [31:0] $end
    $var wire 32 = ALUout [31:0] $end
    $var wire  1 3 ALUsrc $end
    $var wire 32 > D_WIDTH [31:0] $end
    $var wire  1 6 EQ $end
    $var wire 32 4 ImmOp [31:0] $end
    $var wire  1 5 RegWrite $end
    $var wire 32 < a0 [31:0] $end
    $var wire  1 : clk $end
    $var wire  5 . rd [4:0] $end
    $var wire 32 $ regop2 [31:0] $end
    $var wire  5 , rs1 [4:0] $end
    $var wire  5 - rs2 [4:0] $end
    $scope module ALU $end
     $var wire  1 2 ALUctrl $end
     $var wire 32 # ALUop1 [31:0] $end
     $var wire 32 8 ALUop2 [31:0] $end
     $var wire 32 = ALUout [31:0] $end
     $var wire  1 6 EQ $end
    $upscope $end
    $scope module Mux2 $end
     $var wire 32 8 ALUop2 [31:0] $end
     $var wire  1 3 ALUsrc $end
     $var wire 32 4 ImmOp [31:0] $end
     $var wire 32 $ RegOp2 [31:0] $end
    $upscope $end
    $scope module REG_FILE $end
     $var wire  5 , AD1 [4:0] $end
     $var wire  5 - AD2 [4:0] $end
     $var wire  5 . AD3 [4:0] $end
     $var wire 32 > ADDRESS_WIDTH [31:0] $end
     $var wire 32 > DATA_WIDTH [31:0] $end
     $var wire 32 # RD1 [31:0] $end
     $var wire 32 $ RD2 [31:0] $end
     $var wire 32 = WD3 [31:0] $end
     $var wire  1 5 WE3 $end
     $var wire 32 < a0 [31:0] $end
     $var wire  1 : clk $end
     $var wire 32 % ram_array[-1] [31:0] $end
     $var wire 32 & ram_array[0] [31:0] $end
    $upscope $end
   $upscope $end
   $scope module SignExtend $end
    $var wire 32 > DATA_WIDTH [31:0] $end
    $var wire 32 ? IMM_WIDTH [31:0] $end
    $var wire 12 9 Imm [11:0] $end
    $var wire 12 / Imm1 [11:0] $end
    $var wire 12 0 Imm2 [11:0] $end
    $var wire 32 4 ImmOp [31:0] $end
    $var wire  1 7 ImmSrc $end
    $var wire 32 ( instr [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b0000000 )
0*
0+
b00000 ,
b00000 -
b00000 .
b000000000000 /
b000000000000 0
01
02
03
b00000000000000000000000000000000 4
05
06
07
b00000000000000000000000000000000 8
b000000000000 9
1:
1;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000100000 >
b00000000000000000000000000001100 ?
#1
b00001111111100000000001100010011 (
b0010011 )
1*
b11111 -
b00110 .
b000001110011 /
b000011111111 0
12
13
b00000000000000000000000011111111 4
15
b00000000000000000000000011111111 8
b000011111111 9
0:
b00000000000000000000000011111111 =
#2
b00000000000000000000000011111111 &
1:
b00000000000000000000000011111111 <
#3
0:
#4
b00000000000000000000000011111111 #
16
1:
b00000000000000000000000111111110 =
#5
0:
#6
b00000000000000000000000111111110 &
1:
0;
b00000000000000000000000111111110 <
#7
0:
#8
b00000000000000000000000111111110 #
b00000000000000000000000000000100 '
b00000000000000000000010100010011 (
b00000 -
b01010 .
b000000000101 /
b000000000000 0
b00000000000000000000000000000000 4
06
b00000000000000000000000000000000 8
b000000000000 9
1:
#9
0:
#10
b00000000000000000000000111111110 $
b00000000000000000000000000001000 '
b00000000000000000000010110010011 (
b01011 .
b010000000101 /
1:
#11
0:
#12
b00000000000000000000000111111110 %
b00000000000000000000000000001100 '
b00000000000001011000010100010011 (
b01011 ,
b01010 .
b000000000101 /
1:
#13
0:
#14
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b00001 -
b01011 .
b010000000101 /
b000000000001 0
b00000000000000000000000000000001 4
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000000111111111 =
#15
0:
#16
b00000000000000000000000111111111 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b1100011 )
0*
1+
b00110 -
b11001 .
b111111111100 /
b111111100110 0
11
02
03
b11111111111111111111111111111100 4
05
16
17
b00000000000000000000000111111110 8
b111111111100 9
1:
b00000000000000000000001111111100 =
#17
0:
#18
b00000000000000000000000111111111 #
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b0010011 )
1*
0+
b00001 -
b01011 .
b010000000101 /
b000000000001 0
01
12
13
b00000000000000000000000000000001 4
15
06
07
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000001000000000 =
#19
0:
#20
b00000000000000000000000111111111 $
b00000000000000000000001000000000 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b1100011 )
0*
1+
b00110 -
b11001 .
b111111111100 /
b111111100110 0
11
02
03
b11111111111111111111111111111100 4
05
16
17
b00000000000000000000000111111111 8
b111111111100 9
1:
b00000000000000000000001111111110 =
#21
0:
#22
b00000000000000000000001000000000 #
b00000000000000000000000111111110 $
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b0010011 )
1*
0+
b00001 -
b01011 .
b010000000101 /
b000000000001 0
01
12
13
b00000000000000000000000000000001 4
15
06
07
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000001000000001 =
#23
0:
#24
b00000000000000000000001000000000 $
b00000000000000000000001000000001 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b1100011 )
0*
1+
b00110 -
b11001 .
b111111111100 /
b111111100110 0
11
02
03
b11111111111111111111111111111100 4
05
16
17
b00000000000000000000001000000000 8
b111111111100 9
1:
b00000000000000000000010000000000 =
#25
0:
#26
b00000000000000000000001000000001 #
b00000000000000000000000111111110 $
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b0010011 )
1*
0+
b00001 -
b01011 .
b010000000101 /
b000000000001 0
01
12
13
b00000000000000000000000000000001 4
15
06
07
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000001000000010 =
#27
0:
#28
b00000000000000000000001000000001 $
b00000000000000000000001000000010 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b1100011 )
0*
1+
b00110 -
b11001 .
b111111111100 /
b111111100110 0
11
02
03
b11111111111111111111111111111100 4
05
16
17
b00000000000000000000001000000001 8
b111111111100 9
1:
b00000000000000000000010000000010 =
#29
0:
#30
b00000000000000000000001000000010 #
b00000000000000000000000111111110 $
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b0010011 )
1*
0+
b00001 -
b01011 .
b010000000101 /
b000000000001 0
01
12
13
b00000000000000000000000000000001 4
15
06
07
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000001000000011 =
#31
0:
#32
b00000000000000000000001000000010 $
b00000000000000000000001000000011 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b1100011 )
0*
1+
b00110 -
b11001 .
b111111111100 /
b111111100110 0
11
02
03
b11111111111111111111111111111100 4
05
16
17
b00000000000000000000001000000010 8
b111111111100 9
1:
b00000000000000000000010000000100 =
#33
0:
#34
b00000000000000000000001000000011 #
b00000000000000000000000111111110 $
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b0010011 )
1*
0+
b00001 -
b01011 .
b010000000101 /
b000000000001 0
01
12
13
b00000000000000000000000000000001 4
15
06
07
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000001000000100 =
#35
0:
#36
b00000000000000000000001000000011 $
b00000000000000000000001000000100 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b1100011 )
0*
1+
b00110 -
b11001 .
b111111111100 /
b111111100110 0
11
02
03
b11111111111111111111111111111100 4
05
16
17
b00000000000000000000001000000011 8
b111111111100 9
1:
1;
b00000000000000000000010000000110 =
#37
b00000000000000000000000000000000 '
b00001111111100000000001100010011 (
b0010011 )
1*
0+
b00000 ,
b11111 -
b00110 .
b000001110011 /
b000011111111 0
01
12
13
b00000000000000000000000011111111 4
15
06
07
b00000000000000000000000011111111 8
b000011111111 9
0:
b00000000000000000000001100000010 =
#38
b00000000000000000000000111111110 #
b00000000000000000000001000000100 $
b00000000000000000000001100000010 &
1:
0;
b00000000000000000000001100000010 <
b00000000000000000000001011111101 =
#39
0:
#40
b00000000000000000000001100000010 #
b00000000000000000000001011111101 &
b00000000000000000000000000000100 '
b00000000000000000000010100010011 (
b00000 -
b01010 .
b000000000101 /
b000000000000 0
b00000000000000000000000000000000 4
b00000000000000000000000000000000 8
b000000000000 9
1:
b00000000000000000000001011111101 <
b00000000000000000000001100000010 =
#41
0:
#42
b00000000000000000000001011111101 #
b00000000000000000000001011111101 $
b00000000000000000000001100000010 &
b00000000000000000000000000001000 '
b00000000000000000000010110010011 (
b01011 .
b010000000101 /
1:
b00000000000000000000001100000010 <
b00000000000000000000001011111101 =
#43
0:
#44
b00000000000000000000001100000010 #
b00000000000000000000001100000010 $
b00000000000000000000001011111101 %
b00000000000000000000000000001100 '
b00000000000001011000010100010011 (
b01011 ,
b01010 .
b000000000101 /
1:
b00000000000000000000001100000010 =
#45
0:
#46
b00000000000000000000001011111101 #
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b00001 -
b01011 .
b010000000101 /
b000000000001 0
b00000000000000000000000000000001 4
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000001011111110 =
#47
0:
#48
b00000000000000000000001011111101 $
b00000000000000000000001011111110 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b1100011 )
0*
1+
b00110 -
b11001 .
b111111111100 /
b111111100110 0
11
02
03
b11111111111111111111111111111100 4
05
16
17
b00000000000000000000001011111101 8
b111111111100 9
1:
b00000000000000000000010111111010 =
#49
0:
#50
b00000000000000000000001011111110 #
b00000000000000000000001100000010 $
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b0010011 )
1*
0+
b00001 -
b01011 .
b010000000101 /
b000000000001 0
01
12
13
b00000000000000000000000000000001 4
15
06
07
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000001011111111 =
#51
0:
#52
b00000000000000000000001011111110 $
b00000000000000000000001011111111 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b1100011 )
0*
1+
b00110 -
b11001 .
b111111111100 /
b111111100110 0
11
02
03
b11111111111111111111111111111100 4
05
16
17
b00000000000000000000001011111110 8
b111111111100 9
1:
b00000000000000000000010111111100 =
#53
0:
#54
b00000000000000000000001011111111 #
b00000000000000000000001100000010 $
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b0010011 )
1*
0+
b00001 -
b01011 .
b010000000101 /
b000000000001 0
01
12
13
b00000000000000000000000000000001 4
15
06
07
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000001100000000 =
#55
0:
#56
b00000000000000000000001011111111 $
b00000000000000000000001100000000 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b1100011 )
0*
1+
b00110 -
b11001 .
b111111111100 /
b111111100110 0
11
02
03
b11111111111111111111111111111100 4
05
16
17
b00000000000000000000001011111111 8
b111111111100 9
1:
b00000000000000000000010111111110 =
#57
0:
#58
b00000000000000000000001100000000 #
b00000000000000000000001100000010 $
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b0010011 )
1*
0+
b00001 -
b01011 .
b010000000101 /
b000000000001 0
01
12
13
b00000000000000000000000000000001 4
15
06
07
b00000000000000000000000000000001 8
b000000000001 9
1:
b00000000000000000000001100000001 =
#59
0:
