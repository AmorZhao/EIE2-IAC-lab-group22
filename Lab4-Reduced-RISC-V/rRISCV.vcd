$version Generated by VerilatedVcd $end
$date Thu Nov 24 14:33:32 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 ; a0 [31:0] $end
  $var wire  1 9 clk $end
  $var wire  1 : rst $end
  $scope module rRISCV $end
   $var wire  1 3 ALUctrl $end
   $var wire  1 4 ALUsrc $end
   $var wire 32 > D_WIDTH [31:0] $end
   $var wire  1 6 EQ $end
   $var wire 32 ) ImmOp [31:0] $end
   $var wire  1 7 ImmSrc $end
   $var wire 32 ' PC [31:0] $end
   $var wire  1 2 PCsrc $end
   $var wire  1 5 RegWrite $end
   $var wire 32 ; a0 [31:0] $end
   $var wire  1 9 clk $end
   $var wire 32 ( instr [31:0] $end
   $var wire  1 : rst $end
   $scope module Control $end
    $var wire  1 3 ALUctrl $end
    $var wire  1 4 ALUsrc $end
    $var wire  1 6 EQ $end
    $var wire  1 7 ImmSrc $end
    $var wire  1 2 PCsrc $end
    $var wire  1 5 RegWrite $end
    $var wire  1 + addi $end
    $var wire  1 , bne $end
    $var wire  7 * instr [6:0] $end
   $upscope $end
   $scope module InstrMem $end
    $var wire 32 ' A [31:0] $end
    $var wire 32 > ADDRESS_WIDTH [31:0] $end
    $var wire 32 > DATA_WIDTH [31:0] $end
    $var wire 32 ( RD [31:0] $end
   $upscope $end
   $scope module PCregister $end
    $var wire 32 > WIDTH [31:0] $end
    $var wire  1 9 clk $end
    $var wire 32 ) immop [31:0] $end
    $var wire 32 ' pc [31:0] $end
    $var wire  1 2 pcsrc $end
    $var wire  1 : rst $end
   $upscope $end
   $scope module RedBlock $end
    $var wire  1 3 ALUctrl $end
    $var wire 32 # ALUop1 [31:0] $end
    $var wire 32 8 ALUop2 [31:0] $end
    $var wire 32 < ALUout [31:0] $end
    $var wire  1 4 ALUsrc $end
    $var wire 32 > D_WIDTH [31:0] $end
    $var wire  1 6 EQ $end
    $var wire 32 ) ImmOp [31:0] $end
    $var wire  1 5 RegWrite $end
    $var wire 32 ; a0 [31:0] $end
    $var wire  1 9 clk $end
    $var wire  5 / rd [4:0] $end
    $var wire 32 $ regop2 [31:0] $end
    $var wire  5 - rs1 [4:0] $end
    $var wire  5 . rs2 [4:0] $end
    $scope module ALU $end
     $var wire  1 3 ALUctrl $end
     $var wire 32 # ALUop1 [31:0] $end
     $var wire 32 8 ALUop2 [31:0] $end
     $var wire 32 < ALUout [31:0] $end
     $var wire  1 6 EQ $end
    $upscope $end
    $scope module Mux2 $end
     $var wire 32 8 ALUop2 [31:0] $end
     $var wire  1 4 ALUsrc $end
     $var wire 32 ) ImmOp [31:0] $end
     $var wire 32 $ RegOp2 [31:0] $end
    $upscope $end
    $scope module REG_FILE $end
     $var wire  5 - AD1 [4:0] $end
     $var wire  5 . AD2 [4:0] $end
     $var wire  5 / AD3 [4:0] $end
     $var wire 32 > ADDRESS_WIDTH [31:0] $end
     $var wire 32 > DATA_WIDTH [31:0] $end
     $var wire 32 # RD1 [31:0] $end
     $var wire 32 $ RD2 [31:0] $end
     $var wire 32 < WD3 [31:0] $end
     $var wire  1 5 WE3 $end
     $var wire 32 ; a0 [31:0] $end
     $var wire  1 9 clk $end
     $var wire 32 % ram_array[-1] [31:0] $end
     $var wire 32 & ram_array[0] [31:0] $end
    $upscope $end
   $upscope $end
   $scope module SignExtend $end
    $var wire 32 > DATA_WIDTH [31:0] $end
    $var wire 32 ? IMM_WIDTH [31:0] $end
    $var wire 12 = Imm [11:0] $end
    $var wire 12 0 Imm1 [11:0] $end
    $var wire 12 1 Imm2 [11:0] $end
    $var wire 32 ) ImmOp [31:0] $end
    $var wire  1 7 ImmSrc $end
    $var wire 32 ( instr [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b0000000 *
0+
0,
b00000 -
b00000 .
b00000 /
b000000000000 0
b000000000000 1
02
03
04
05
06
07
b00000000000000000000000000000000 8
19
1:
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b000000000000 =
b00000000000000000000000000100000 >
b00000000000000000000000000001100 ?
#1
b00001111111100000000001100010011 (
b00000000000000000000001100010011 )
b0010011 *
1+
b11111 .
b00110 /
b000001110011 0
b000011111111 1
13
14
15
b00000000000000000000001100010011 8
09
b00000000000000000000001100010011 <
b000011111111 =
#2
b00000000000000000000001100010011 &
19
b00000000000000000000001100010011 ;
#3
09
#4
b00000000000000000000001100010011 #
16
19
b00000000000000000000011000100110 <
#5
09
#6
b00000000000000000000011000100110 &
19
0:
b00000000000000000000011000100110 ;
#7
09
#8
b00000000000000000000011000100110 #
b00000000000000000000000000000100 '
b00000000000000000000010100010011 (
b00000000000000000000010100010011 )
b00000 .
b01010 /
b000000000101 0
b000000000000 1
06
b00000000000000000000010100010011 8
19
b00000000000000000000101100111001 <
b000000000000 =
#9
09
#10
b00000000000000000000011000100110 $
b00000000000000000000101100111001 &
b00000000000000000000000000001000 '
b00000000000000000000010110010011 (
b00000000000000000000010110010011 )
b01011 /
b010000000101 0
b00000000000000000000010110010011 8
19
b00000000000000000000101100111001 ;
b00000000000000000000101110111001 <
#11
09
#12
b00000000000000000000101100111001 #
b00000000000000000000101100111001 $
b00000000000000000000101110111001 %
b00000000000000000000000000001100 '
b00000000000001011000010100010011 (
b00000000000000000000010100010011 )
b01011 -
b01010 /
b000000000101 0
b00000000000000000000010100010011 8
19
b00000000000000000001000001001100 <
#13
09
#14
b00000000000000000000101110111001 #
b00000000000000000001000001001100 &
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b00000000000000000000010110010011 )
b00001 .
b01011 /
b010000000101 0
b000000000001 1
b00000000000000000000010110010011 8
19
b00000000000000000001000001001100 ;
b00000000000000000001000101001100 <
b000000000001 =
#15
09
#16
b00000000000000000000101110111001 $
b00000000000000000001000101001100 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b11111111111111111111110011100011 )
b1100011 *
0+
1,
b00110 .
b11001 /
b111111111100 0
b111111100110 1
b11111111111111111111110011100011 8
19
b00000000000000000000100010011100 <
b111111100110 =
#17
09
#18
b00000000000000000001000101001100 #
b00000000000000000001000001001100 $
b00000000000000000000100010011100 %
b00000000000000000000000000011000 '
b11111110000000110001100011100011 (
b11111111111111111111100011100011 )
b00110 -
b00000 .
b10001 /
b111111111000 0
b111111100000 1
b11111111111111111111100011100011 8
19
b00000000000000000000101000101111 <
b111111100000 =
#19
09
#20
b00000000000000000001000001001100 #
b00000000000000000000101000101111 %
b00000000000000000000000000011100 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b0000000 *
b00000 -
b00000 /
b000000000000 0
b000000000000 1
b00000000000000000000000000000000 8
19
b00000000000000000001000001001100 <
b000000000000 =
#21
09
#22
b00000000000000000000000000100000 '
19
#23
09
#24
b00000000000000000000000000100100 '
19
#25
09
#26
b00000000000000000000000000101000 '
19
#27
09
#28
b00000000000000000000000000101100 '
19
#29
09
#30
b00000000000000000000000000110000 '
19
#31
09
#32
b00000000000000000000000000110100 '
19
#33
09
#34
b00000000000000000000000000111000 '
19
#35
09
#36
b00000000000000000000000000111100 '
19
1:
#37
b00000000000000000000000000000000 '
b00001111111100000000001100010011 (
b00000000000000000000001100010011 )
b0010011 *
1+
0,
b11111 .
b00110 /
b000001110011 0
b000011111111 1
b00000000000000000000001100010011 8
09
b00000000000000000001001101011111 <
b000011111111 =
#38
b00000000000000000000101000101111 $
b00000000000000000001001101011111 &
19
0:
b00000000000000000001001101011111 ;
#39
09
#40
b00000000000000000001001101011111 #
b00000000000000000000000000000100 '
b00000000000000000000010100010011 (
b00000000000000000000010100010011 )
b00000 .
b01010 /
b000000000101 0
b000000000000 1
b00000000000000000000010100010011 8
19
b00000000000000000001100001110010 <
b000000000000 =
#41
09
#42
b00000000000000000001001101011111 $
b00000000000000000001100001110010 &
b00000000000000000000000000001000 '
b00000000000000000000010110010011 (
b00000000000000000000010110010011 )
b01011 /
b010000000101 0
b00000000000000000000010110010011 8
19
b00000000000000000001100001110010 ;
b00000000000000000001100011110010 <
#43
09
#44
b00000000000000000001100001110010 #
b00000000000000000001100001110010 $
b00000000000000000001100011110010 %
b00000000000000000000000000001100 '
b00000000000001011000010100010011 (
b00000000000000000000010100010011 )
b01011 -
b01010 /
b000000000101 0
b00000000000000000000010100010011 8
19
b00000000000000000001110110000101 <
#45
09
#46
b00000000000000000001100011110010 #
b00000000000000000001110110000101 &
b00000000000000000000000000010000 '
b00000000000101011000010110010011 (
b00000000000000000000010110010011 )
b00001 .
b01011 /
b010000000101 0
b000000000001 1
b00000000000000000000010110010011 8
19
b00000000000000000001110110000101 ;
b00000000000000000001111010000101 <
b000000000001 =
#47
09
#48
b00000000000000000001100011110010 $
b00000000000000000001111010000101 %
b00000000000000000000000000010100 '
b11111110011001011001110011100011 (
b11111111111111111111110011100011 )
b1100011 *
0+
1,
b00110 .
b11001 /
b111111111100 0
b111111100110 1
b11111111111111111111110011100011 8
19
b00000000000000000001010111010101 <
b111111100110 =
#49
09
#50
b00000000000000000001111010000101 #
b00000000000000000001110110000101 $
b00000000000000000001010111010101 %
b00000000000000000000000000011000 '
b11111110000000110001100011100011 (
b11111111111111111111100011100011 )
b00110 -
b00000 .
b10001 /
b111111111000 0
b111111100000 1
b11111111111111111111100011100011 8
19
b00000000000000000001011101101000 <
b111111100000 =
#51
09
#52
b00000000000000000001110110000101 #
b00000000000000000001011101101000 %
b00000000000000000000000000011100 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b0000000 *
b00000 -
b00000 /
b000000000000 0
b000000000000 1
b00000000000000000000000000000000 8
19
b00000000000000000001110110000101 <
b000000000000 =
#53
09
#54
b00000000000000000000000000100000 '
19
#55
09
#56
b00000000000000000000000000100100 '
19
#57
09
#58
b00000000000000000000000000101000 '
19
#59
09
